function runSDRuQPSKTransmitter(prmQPSKTransmitter)
    %#codegen

    persistent hTx radio

    if isempty(hTx)
        % Initialize the components
        % Create and configure the transmitter System object
        hTx = QPSKTransmitter(...
            'UpsamplingFactor', prmQPSKTransmitter.Interpolation, ...
            'RolloffFactor', prmQPSKTransmitter.RolloffFactor, ...
            'RaisedCosineFilterSpan', prmQPSKTransmitter.RaisedCosineFilterSpan, ...
            'MessageBits', prmQPSKTransmitter.MessageBits, ...
            'MessageLength', prmQPSKTransmitter.MessageLength, ...
            'NumberOfMessage', prmQPSKTransmitter.NumberOfMessage, ...
            'ScramblerBase', prmQPSKTransmitter.ScramblerBase, ...
            'ScramblerPolynomial', prmQPSKTransmitter.ScramblerPolynomial, ...
            'ScramblerInitialConditions', prmQPSKTransmitter.ScramblerInitialConditions);

        % Create and configure the SDRu System object. Set the SerialNum for B2xx
        % radios and IPAddress for X3xx, N2xx, and USRP2 radios. MasterClockRate
        % is not configurable for N2xx and USRP2 radios.
        %{

        switch prmQPSKTransmitter.Platform
            case {'B200', 'B210'}
                radio = comm.SDRuTransmitter(...
                    'Platform', prmQPSKTransmitter.Platform, ...
                    'SerialNum', prmQPSKTransmitter.Address, ...
                    'MasterClockRate', prmQPSKTransmitter.MasterClockRate, ...
                    'CenterFrequency', prmQPSKTransmitter.USRPCenterFrequency, ...
                    'Gain', prmQPSKTransmitter.USRPGain, ...
                    'InterpolationFactor', prmQPSKTransmitter.USRPInterpolationFactor);
            case {'X300', 'X310'}
                radio = comm.SDRuTransmitter(...
                    'Platform', prmQPSKTransmitter.Platform, ...
                    'IPAddress', prmQPSKTransmitter.Address, ...
                    'MasterClockRate', prmQPSKTransmitter.MasterClockRate, ...
                    'CenterFrequency', prmQPSKTransmitter.USRPCenterFrequency, ...
                    'Gain', prmQPSKTransmitter.USRPGain, ...
                    'InterpolationFactor', prmQPSKTransmitter.USRPInterpolationFactor);
            case {'N200/N210/USRP2'}
                radio = comm.SDRuTransmitter(...
                    'Platform', prmQPSKTransmitter.Platform, ...
                    'IPAddress', prmQPSKTransmitter.Address, ...
                    'CenterFrequency', prmQPSKTransmitter.USRPCenterFrequency, ...
                    'Gain', prmQPSKTransmitter.USRPGain, ...
                    'InterpolationFactor', prmQPSKTransmitter.USRPInterpolationFactor);
            case {'N300', 'N310'}
                radio = comm.SDRuTransmitter(...
                    'Platform', prmQPSKTransmitter.Platform, ...
                    'IPAddress', prmQPSKTransmitter.Address, ...
                    'MasterClockRate', prmQPSKTransmitter.MasterClockRate, ...
                    'CenterFrequency', prmQPSKTransmitter.USRPCenterFrequency, ...
                    'Gain', prmQPSKTransmitter.USRPGain, ...
                    'InterpolationFactor', prmQPSKTransmitter.USRPInterpolationFactor);
            case {'N320/N321'}
                radio = comm.SDRuTransmitter(...
                    'Platform', prmQPSKTransmitter.Platform, ...
                    'IPAddress', prmQPSKTransmitter.Address, ...
                    'MasterClockRate', prmQPSKTransmitter.MasterClockRate, ...
                    'CenterFrequency', prmQPSKTransmitter.USRPCenterFrequency, ...
                    'Gain', prmQPSKTransmitter.USRPGain, ...
                    'InterpolationFactor', prmQPSKTransmitter.USRPInterpolationFactor);
        end

        %}

        radio = comm.SDRuTransmitter(...
            'Platform', prmQPSKTransmitter.Platform, ...
            'IPAddress', prmQPSKTransmitter.Address, ...
            'CenterFrequency', prmQPSKTransmitter.USRPCenterFrequency, ...
            'Gain', prmQPSKTransmitter.USRPGain, ...
            'InterpolationFactor', prmQPSKTransmitter.USRPInterpolationFactor);
    end

    disp('start')

    currentTime = 0;

    flag = false;

    %Transmission Process
    while currentTime < prmQPSKTransmitter.StopTime

        % Bit generation, modulation and transmission filtering
        data = hTx();
        % Data transmission
        radio(data);
        % Update simulation time
        currentTime = currentTime + prmQPSKTransmitter.USRPFrameTime;

        d = clock;

        if (mod(d(6), 1) > 0.5)

            if ~flag
                flag = true;
                radio.CenterFrequency = 915e6;
            end

        elseif flag
            flag = false;
            radio.CenterFrequency = 914e6;
        end

    end

    % stop(t)

    release(hTx);
    release(radio);

end
