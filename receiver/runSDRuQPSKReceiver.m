function BER = runSDRuQPSKReceiver(prmQPSKReceiver, printData)

    %#codegen
    persistent qpskRx radio

    if isempty(qpskRx)
        qpskRx = QPSKReceiver(...
            'ModulationOrder', prmQPSKReceiver.ModulationOrder, ...
            'SampleRate', prmQPSKReceiver.Fs, ...
            'DecimationFactor', prmQPSKReceiver.Decimation, ...
            'FrameSize', prmQPSKReceiver.FrameSize, ...
            'HeaderLength', prmQPSKReceiver.HeaderLength, ...
            'NumberOfMessage', prmQPSKReceiver.NumberOfMessage, ...
            'PayloadLength', prmQPSKReceiver.PayloadLength, ...
            'DesiredPower', prmQPSKReceiver.DesiredPower, ...
            'AveragingLength', prmQPSKReceiver.AveragingLength, ...
            'MaxPowerGain', prmQPSKReceiver.MaxPowerGain, ...
            'RolloffFactor', prmQPSKReceiver.RolloffFactor, ...
            'RaisedCosineFilterSpan', prmQPSKReceiver.RaisedCosineFilterSpan, ...
            'InputSamplesPerSymbol', prmQPSKReceiver.Interpolation, ...
            'MaximumFrequencyOffset', prmQPSKReceiver.MaximumFrequencyOffset, ...
            'PostFilterOversampling', prmQPSKReceiver.Interpolation / prmQPSKReceiver.Decimation, ...
            'PhaseRecoveryLoopBandwidth', prmQPSKReceiver.PhaseRecoveryLoopBandwidth, ...
            'PhaseRecoveryDampingFactor', prmQPSKReceiver.PhaseRecoveryDampingFactor, ...
            'TimingRecoveryDampingFactor', prmQPSKReceiver.TimingRecoveryDampingFactor, ...
            'TimingRecoveryLoopBandwidth', prmQPSKReceiver.TimingRecoveryLoopBandwidth, ...
            'TimingErrorDetectorGain', prmQPSKReceiver.TimingErrorDetectorGain, ...
            'PreambleDetectorThreshold', prmQPSKReceiver.PreambleDetectorThreshold, ...
            'DescramblerBase', prmQPSKReceiver.ScramblerBase, ...
            'DescramblerPolynomial', prmQPSKReceiver.ScramblerPolynomial, ...
            'DescramblerInitialConditions', prmQPSKReceiver.ScramblerInitialConditions, ...
            'BerMask', prmQPSKReceiver.BerMask, ...
            'PrintOption', printData);

        % Create and configure the SDRu System object. Set the SerialNum for B2xx
        % radios and IPAddress for X3xx, N2xx, N3xx, and USRP2 radios. MasterClockRate
        % is not configurable for N2xx and USRP2 radios.
        %{

        switch prmQPSKReceiver.Platform
            case {'B200', 'B210'}
                radio = comm.SDRuReceiver(...
                    'Platform', prmQPSKReceiver.Platform, ...
                    'SerialNum', prmQPSKReceiver.Address, ...
                    'MasterClockRate', prmQPSKReceiver.MasterClockRate, ...
                    'CenterFrequency', prmQPSKReceiver.USRPCenterFrequency, ...
                    'Gain', prmQPSKReceiver.USRPGain, ...
                    'DecimationFactor', prmQPSKReceiver.USRPDecimationFactor, ...
                    'SamplesPerFrame', prmQPSKReceiver.USRPFrameLength, ...
                    'OutputDataType', 'double');
            case {'X300', 'X310'}
                radio = comm.SDRuReceiver(...
                    'Platform', prmQPSKReceiver.Platform, ...
                    'IPAddress', prmQPSKReceiver.Address, ...
                    'MasterClockRate', prmQPSKReceiver.MasterClockRate, ...
                    'CenterFrequency', prmQPSKReceiver.USRPCenterFrequency, ...
                    'Gain', prmQPSKReceiver.USRPGain, ...
                    'DecimationFactor', prmQPSKReceiver.USRPDecimationFactor, ...
                    'SamplesPerFrame', prmQPSKReceiver.USRPFrameLength, ...
                    'OutputDataType', 'double');
            case {'N200/N210/USRP2'}
                radio = comm.SDRuReceiver(...
                    'Platform', prmQPSKReceiver.Platform, ...
                    'IPAddress', prmQPSKReceiver.Address, ...
                    'CenterFrequency', prmQPSKReceiver.USRPCenterFrequency, ...
                    'Gain', prmQPSKReceiver.USRPGain, ...
                    'DecimationFactor', prmQPSKReceiver.USRPDecimationFactor, ...
                    'SamplesPerFrame', prmQPSKReceiver.USRPFrameLength, ...
                    'OutputDataType', 'double');
            case {'N300', 'N310'}
                radio = comm.SDRuReceiver(...
                    'Platform', prmQPSKReceiver.Platform, ...
                    'IPAddress', prmQPSKReceiver.Address, ...
                    'MasterClockRate', prmQPSKReceiver.MasterClockRate, ...
                    'CenterFrequency', prmQPSKReceiver.USRPCenterFrequency, ...
                    'Gain', prmQPSKReceiver.USRPGain, ...
                    'DecimationFactor', prmQPSKReceiver.USRPDecimationFactor, ...
                    'SamplesPerFrame', prmQPSKReceiver.USRPFrameLength, ...
                    'OutputDataType', 'double');
            case {'N320/N321'}
                radio = comm.SDRuReceiver(...
                    'Platform', prmQPSKReceiver.Platform, ...
                    'IPAddress', prmQPSKReceiver.Address, ...
                    'MasterClockRate', prmQPSKReceiver.MasterClockRate, ...
                    'CenterFrequency', prmQPSKReceiver.USRPCenterFrequency, ...
                    'Gain', prmQPSKReceiver.USRPGain, ...
                    'DecimationFactor', prmQPSKReceiver.USRPDecimationFactor, ...
                    'SamplesPerFrame', prmQPSKReceiver.USRPFrameLength, ...
                    'OutputDataType', 'double');
        end

        %}

        radio = comm.SDRuReceiver(...
            'Platform', prmQPSKReceiver.Platform, ...
            'IPAddress', prmQPSKReceiver.Address, ...
            'CenterFrequency', prmQPSKReceiver.USRPCenterFrequency, ...
            'Gain', prmQPSKReceiver.USRPGain, ...
            'DecimationFactor', prmQPSKReceiver.USRPDecimationFactor, ...
            'SamplesPerFrame', prmQPSKReceiver.USRPFrameLength, ...
            'OutputDataType', 'double');

    end

    disp('start')

    % Initialize variables
    len = uint32(0);
    rcvdSignal = complex(zeros(prmQPSKReceiver.USRPFrameLength, 1));
    BER = [];
    currentTime = 0;

    flag = false;
    tt = false;

    while ~tt
        d = clock;

        if (mod(d(6), 1) > 0.5)

            if ~flag
                tt = true;
                flag = true;
                radio.CenterFrequency = 915e6;
            end

        elseif flag
            tt = true;
            flag = false;
            radio.CenterFrequency = 914e6;
        end

    end

    while currentTime < prmQPSKReceiver.StopTime
        % Keep accessing the SDRu System object output until it is valid
        while len <= 0
            [rcvdSignal, len] = step(radio);
        end

        % When the SDRu System object output is valid, decode the received
        % message
        if len > 0
            [~, ~, ~, BER] = qpskRx(rcvdSignal); % Receiver
        end

        len = uint32(0);
        currentTime = currentTime + prmQPSKReceiver.USRPFrameTime;

        d = clock;

        if (mod(d(6), 1) > 0.5)

            if ~flag
                flag = true;
                radio.CenterFrequency = 915e6;
            end

        elseif flag
            flag = false;
            radio.CenterFrequency = 914e6;
        end

    end

    release(qpskRx);
    release(radio);

end
